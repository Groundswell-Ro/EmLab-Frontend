make dbg
b showServiceDialog
r --docroot . --http-address 0.0.0.0 --http-port 9090



void EventView::showServiceDialog(EventDataModule::ServiceData serviceData)
{
    std::cout << "\n\n showServiceDialog - " << serviceData.id << " \n\n ";
    auto dialog = addWidget(std::make_unique<Wt::WDialog>());
    // dialog->setMovable(false);

    auto serviceFormView = dialog->contents()->addWidget(std::make_unique<ServiceFormView>(login_, eventForm_->model_));
    dialog->titleBar()->addStyleClass("text-center text-white");
    dialog->contents()->addStyleClass("d-flex justify-content-center");
    dialog->footer()->addStyleClass("d-flex justify-content-between");

    auto yesBtn = dialog->footer()->addWidget(std::make_unique<Wt::WPushButton>());
    auto noBtn = dialog->footer()->addWidget(std::make_unique<Wt::WPushButton>("Cancel"));

    noBtn->clicked().connect(this, [=]()
                             { dialog->reject(); });
    dialog->rejectWhenEscapePressed();

    if (serviceData.id > 0)
    {
        dialog->titleBar()->addStyleClass("bg-danger");
        noBtn->setStyleClass("btn btn-primary");
        yesBtn->setStyleClass("btn btn-danger");
        yesBtn->setText("Remove");
        dialog->setWindowTitle("Are you sure you want to remove this service?");

        serviceFormView->setData(serviceData);
        serviceFormView->hideServiceChangeBtns();
        yesBtn->clicked().connect(this, [=]()
                                  { removeService(serviceData.id);
                                    refreshData();
                                    dialog->accept(); });
    }
    else
    {
        dialog->titleBar()->addStyleClass("bg-primary");
        noBtn->setStyleClass("btn btn-danger");
        yesBtn->setStyleClass("btn btn-success");
        dialog->setWindowTitle("Add Service");
        dialog->setWindowTitle("Add Service");
        yesBtn->setText("Submit Service");

        yesBtn->clicked().connect(this, [=]()
                                  { 
                                    if(serviceFormView->validate())
                                    {
                                        auto serviceDate = serviceFormView->model_->getData();
                                        registerNewService(serviceData);
                                        refreshData();
                                        dialog->accept(); 
                                  }else {
                                        std::cout << "\n\n Invalid \n\n";
                                  } });
    }

    dialog->finished().connect([=]
                               { 
                                if(dialog->result() == Wt::DialogCode::Accepted)
                                    {
                                        std::cout << "\n\n Accepted \n\n";
                                    }else 
                                    {
                                        std::cout << "\n\n Rejected \n\n";
                                    }
                                dialog->removeFromParent(); });
    dialog->show();
}
